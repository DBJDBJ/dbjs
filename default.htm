<!DOCTYPE HTML >
<html>
<head>
<title>DBJ*JSLib(tm) QUNIT Tests</title>
<link href="http://github.com/jquery/qunit/raw/master/qunit/qunit.css" rel="stylesheet" type="text/css" />
</head>
<body>
  <h1 id="qunit-header">DBJS&trade;&nbsp;JavaScript Library</h1>
 <h2 id="qunit-banner"></h2>
 <h2 id="qunit-userAgent"></h2>
 <ol id="qunit-tests"></ol>
</body>
<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.3.2/jquery.min.js"></script>
<script src="http://github.com/jquery/qunit/raw/master/qunit/qunit.js" type="text/javascript"></script>
<!-- use 'local' dbjs -->
<script src="dbj.lib.js" type="text/javascript"></script>
<script type="text/javascript">
    function call_in_loop(fp, howlong) {
        var retval = null, j = howlong || 1000;
        while (j--) { retval = fp(); } return retval;
    }
    // DBJ qunit front-end
    (function(window, undefined) {
        window.TEST = {
            test: function(title, tar) {
                if (!tar || !tar.length || (!tar[0].length)) {
                    throw "TEST.test() second argument has to be : [[function, expected_value,loop_length],...]";
                }
                test(
                  title + ", " + tar.length + " tests.",
                  function() {
                      expect(tar.length);
                      var fun, expected, looplen, L = tar.length; while (L--) {
                          looplen = tar[L][2] || 1;
                          expected = tar[L][1];
                          fun = tar[L][0];
                          if (undefined === expected) throw "TEST.test(): expected retval not found in a input where it should be?";
                          if ("function" !== typeof fun) throw "TEST.test(): function not found in a input where it should be?";
                          equals(
                             call_in_loop(function() {
                                 return fun();
                             }, looplen),
                             expected,
                             (looplen > 1 ? looplen + " x " : "") + ("" + fun)/*.replace(/^.+\{/, "").replace(/\}.*$/, "")*/ + " "
                         );
                      }
                  }
                 );
            },
            normalize_input: function(bad_arr) {
                /* 
                transform INTO this  :
                [ [function () {}, expected, loopsize ],[function () {}, expected, loopsize ] ]
                from this format :
                [ [function_body_string, expected, loopsize ],[function_body_string, expected, loopsize ] ]
                Why ? 
                TEST.test second argument is NOT a legal JSON.
                It is much easier to write tests in this format, but that is bad JSON since it contains functions.
                in the future we might receive test input as a JSON  string from the server side. 
                And bad JSON will not be accepted by JSON.parse()
                Purpose of this method is to normalize input  from the legal JSON format
                */

                var retval = [], L = bad_arr.length, fun, expected, looplen;
                while (L--) {
                    fun = bad_arr[L][0];
                    expected = bad_arr[L][1];
                    looplen = bad_arr[L][2] || 1;
                    if (!fun || "string" !== typeof fun) throw "TEST.normalize_input(): function source not found where it should be ?";
                    if (!expected) throw "TEST.normalize_input(): expected retval not found where it should be ?";
                    // transform the function source into the function
                    // only no-argument anonimous functions are dealt with
                    fun = new Function(fun);
                    if (!fun || "function" !== typeof fun) throw "TEST.normalize_input(): function transformation went wrong.";
                    retval.push(
                         [fun, expected, looplen]
                    );
                }
                return retval;
            },
            load: function(tests) {
                for (var module_name in tests) {
                    module(module_name);
                    for (var test_name in tests[module_name]) {
                        this.test(test_name, tests[module_name][test_name]);
                    }
                }
            }
        };
    })(this);
    //-------------------------------------------------------------------------------------
    this.onload = function() {
        try {
            TEST.load(tests);
        } catch (x) {
            alert(x + "");
        }
    };
  </script>
  <script type="text/javascript">
      var tests = {
          "DBJS": {  // begin module "DBJS"
              "JSON services":
                    [
                        [function() { return dbj.json.ok_string('{"a":1}') }, true],
                        [function() { return dbj.json.nonstandard }, false],
                        [function() { return "object" === typeof dbj.json.parse('{ "a":1 }') }, true]
                    ],
              "Object creation services":
                    [
                        [function() { return 1 === dbj.create(dbj.json.parse('{ "a":1 }')).a; }, true]
                    ],
              "HTML services":
                    [
                        [function() { return dbj.decode('<div id="a" rel=\'r&l\' >'); }, "&lt;div id=&quot;a&quot; rel=&quot;r&amp;l&quot; &gt;"]
                    ]
          }, // eof module "DBJS"
          "DBJS*Utilities": {
              "1":
                    [
                       [function() { return "string" === typeof dbj.reveal(document.location); }, true],
                       [function() { return dbj.xml.doc().load("<root />"); }, true],
                       [function() { return typeof dbj.GUID(); }, "string"]
                    ]
          }
}         // eof tests
  </script>
</html>
