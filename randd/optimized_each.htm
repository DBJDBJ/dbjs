<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>DBJ*Each</title>
 <meta http-equiv="Content-type" content="text/html; charset=utf-8" />
 <link href="http://dbj.org/4/blueprint/screen.css" rel="stylesheet" type="text/css" media="screen,projection" />
    <style type="text/css">
    button,input { width:200px; margin:13px; padding:3px; }
    table.result { border:solid 1px #C0C0C0; font: inherit; }
    table.result td { border:solid 1px  #C0C0C0; }
    table.result th { border:solid 1px  #C0C0C0; font-weight:bold; background-color:#cccccc; }
    table.result caption { font-weight:bold; }
    </style>
    <script src="http://code.jquery.com/jquery-nightly.js" type="text/javascript"></script>
    <script src="dbj.each.js" type="text/javascript"></script>
    <script type="text/javascript" >
        $(function() {
            //
            // .net string.format like function
            // usage:   "{0} means 'zero'".format("nula") 
            // returns: "nula means 'zero'"
            // place holders must be in a range 0-99.
            // if no argument given for the placeholder, 
            // no replacement will be done, so
            // "oops {99}".format("!")
            // returns the input
            // same placeholders will be all replaced 
            // with the same argument :
            // "oops {0}{0}".format("!","?")
            // returns "oops !!"
            //
                String.prototype.format = function() {
                    var args = arguments;
                    return this.replace(/\{(\d|\d\d)\}/g, function($0) {
                        var idx = $0.match(/\d+/);
                        return args[idx] ? args[idx] : $0;
                    });
                };
            //-----------------------------------------------------------------------
            //
            var /* template = "<tr><td>{0}</td><td>{1}</td><td>{2}</td><td>{3}</td><td>{4}</td></tr>", */
                Result = function() {
                    return {
                        add: function(k, v) { result[k] || (result[k] = []); result[k].push(v); return v; },
                        sum: function(key, o) {
                            o = result[key];
                            var s = 0, i = o.length; while (i) s += o[--i];
                            return s;
                        },
                        avg: function(key) { return result.round(result.sum(key) / result[key].length, 3); },
                        meter: function(key, callback, loop) {
                            var t1 = new Date, t2; loop = loop || 1;
                            while (loop--) callback();
                            t2 = (new Date) - t1; result.add(key, t2); return t2;
                        },
                        makeobj: function(which, SIZE) {
                            var obj_;
                            switch (which) {
                                case 2: // $ object
                                    obj_ = $("#container", document.body );
                                    var arr = []; while (SIZE--) arr.push("<div id='{0}' style='display:none;'>{1}</div>".format((+new Date), SIZE));
                                    obj_.append(arr.join(""));
                                    break;
                                case 1: // obj literal
                                    obj_ = {}; while (SIZE--) obj_["" + SIZE] = document.body;
                                    break;
                                default: // array by default
                                    obj_ = new Array(SIZE); while (SIZE--) obj_[SIZE] = SIZE;
                            }
                            return obj_;
                        },
                        round: function(f, dec_places) {
                            /*@cc_on
                            try {
                                @*/
                                var k = Number("1e" + (dec_places || 1));
                                f = "" + parseFloat(f), R = f.match(/\.(.+$)/);
                                if (!R) return f + ".00";
                                return Math.round(f) + "." + Math.ceil(R[0] * k);
                                /*@cc_on
                            } catch (x) {
                                if (confirm("" + x + "\n\nDebug?")) debugger;
                            }
                            @*/
                        },
                        nop: function(nme, val) {
                            /*@cc_on
                            @if (@DEBUG)
                                if (( nme === undefined ) || ( val === undefined ))
                                if ( confirm("Oops. something is wrong in each().\n\nDebug?")) debugger ;
                            @end
                            @*/

                            /* no-op callback*/return true;
                        }
                    };
                },
                result = null;
            //
            function test_(obj, loop) {
                return [loop,
                    result.meter("140", function() { each140(obj, result.nop); }, loop),
                    result.meter("132", function() { each132(obj, result.nop); }, loop),
                    result.meter("126", function() { each126(obj, result.nop); }, loop),
                    result.meter("dbj", function() { optimized_each(obj, result.nop); }, loop)
                    ];
            }
            //-----------------------------------------------------------------------
            function TEST(which, SIZE, RPT) {
                which = Number(which || 0);
                RPT = Number(RPT || 10);
                SIZE = Number(SIZE || 1e4);
                //
                result = Result();
                //
                var s_ = [],
                obj = result.makeobj(which, SIZE),
                caption = "Loop {0} times, with {1}, of size {2}".format(RPT, TEST.objname[which], SIZE);
                try {
                    test_(obj, RPT); delete obj;
                    s_.push(
                    [caption, result.avg("126"), result.avg("132"), result.avg("140"), result.avg("dbj")]
                    );
                    return s_;
                } catch (x) {
                    return ["" + x];
                }
            }
            TEST.objname = { "0": "Array", "1": "Object Literal", "2": "jQuery instance" };

            //-----------------------------------------------------------------------
            var dbj_t = dbj.table($("#container")[0], null, "result");
            dbj_t.add_caption("jQuery.each() optimization Testing");
            dbj_t.add_hdr(["Test ID", "1.2.6", "1.3.2", "1.4.0", "dbj"]);

            function test_show(t_id) {

                var retval = TEST(t_id, $("#size").val(), $("#repeat").val());
                for (var L = retval.length, k = 0; k < L; k++) {
                    dbj_t.add_row(retval[k]);
                }
            }
            //-----------------------------------------------------------------------
            $(document.body)
            .append($("<hr/><span>Size</span>"))
            .append($("<input id='size' value='1000' />"))
            .append($("<span>Repeat</span>"))
            .append($("<input id='repeat' value='100' />"))
            .append(
            $("<button>Array Test</button>").appendTo(document.body).click(
               function() { test_show(0); }
            ))
            .append(
            $("<button>Literal Object Test</button>").appendTo(document.body).click(
               function() { test_show(1); }
            ))
            .append(
            $("<button>jQuery Object Test</button>").appendTo(document.body).click(
               function() { test_show(2); }
            ));
        });                      // eof $(fun) ;
    </script>
    <script type="text/javascript" id="_dbj_table_">
        dbj = {};
        dbj.table = function(host, id, klass, undefined) {
            host || (host = document.body);
            id || (id = "dbj_table_" + (0 + new Date));
            klass || (klass = "dbj_table");
            var table = $("<table id='{0}' class='{1}'><caption></caption><thead></thead><tbody></tbody>".format(id,klass)).appendTo(host),
                $table = $(table[0], host);
            delete table;

            function to_row(row_, header) {
                if (jQuery.isArray(row_)) {
                    var td = header ? "TH" : "TD", wid = Math.round(100 / row_.length);
                    td += " width='"+wid+"%' ";
                    row_ = row_.join("</{0}><{0}>".format(td));
                    return "<tr><{0}>{1}</{0}></tr>".format(td,row_);
                }
                return row_;
            }
            return {
                // first row added defines number of columns
                add_hdr: function(row_) {
                    $table.find("thead").append(to_row(row_, true));
                },
                add_row: function(row_) {
                    $table.find("tbody").append(to_row(row_));
                },
                add_caption: function(caption) {
                    $table.find("caption").append(caption);
                }
            }
        };
    </script>
</head>
<body>
<div id="container"></div>
</body>
</html>
