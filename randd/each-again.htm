<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<title>DBJ*Each Research</title>
<script src="../dbj.hdr.js" type="text/javascript"></script>
<style type="text/css" media="all">
  html,body { height:100%; width:100%; font:10px/1.5 verdana, monospace; }
  article, aside, figure, footer, header, hgroup,
  menu, nav, section { display: block; }
  hr {height:3mm;}
  label, input, button { width: 20mm; margin:2px; padding:2px; border:1px dotted #ccc; }
  input[type="radio"] { max-width:5mm; }
  #konsole { float:right; border: 1px dotted; padding:2mm; width:69%; overflow:auto; }
  #frm { float:left; width:29%; }
</style>
</head>
<body>
<div id="frm" >
<label >Input size<input id="OBJECT_SIZE" value="10" /></label><br />
<label >Arguments<input id="ARGUMENTS" value="" /></label><br />
<label >Loop length<input id="LOOP_LENGTH" value="10" /></label><br />
<label >Number of runs<input id="NUMBER_OF_RUNS" value="10" /></label><br />
<button onclick="main(true)" >Test Object</button><br />
<button onclick="main(false)" >Test Array</button>
</div>
<p id="konsole" onclick="return document.getElementById('konsole').innerText='';" ></p>
</body>
<script type="text/javascript" >
//////////////////////////////////////////////////////////////////////////////////
    dbj.crazyLoader("dbj.each.js", "../dbj.es5.js");
//////////////////////////////////////////////////////////////////////////////////
    window.onload = function() {
    document.title = "DBJ*Each-Again&trade; " + (document.lastModified || "");
        if ( window.google )
        if (google.loader.ClientLocation != null) {
            console.log("Your Location Is: " + google.loader.ClientLocation.address.city + ", " + google.loader.ClientLocation.address.region);
        } else {
            console.log("Your Location Was Not Detected By Google Loader");
        }
    }
</script>
<script type="text/javascript" id="a_little_local_library">
    var     make_object = function(size) { var o = { "size": size }; while (size--) { o[size] = size; }; return o; },
    make_array = function(size) { var a = []; while (size--) { a[size] = size; }; return a; },
    konsole = (function(konsole_id) {
        var el_ = document.getElementById(konsole_id);
        return {
            log: function() {
                var s = [].join.call(arguments, "");
                dbj.later(function() {
                    el_.innerHTML += "<br/>" + s;
                    if (window.console) console.log(s);
                    // el_.lastChild.scrollIntoView();
                }, 10);
            },
            err: function() {
                var msg = Array.prototype.join.call(arguments, "");
                if (window.console) {
                    window.console.error(msg);
                } else {
                    this.log("<span style='color:#cc0000;'>" + msg + "</span>");
                }
            }
        };
    } ("konsole")) ;

</script>
<script type="text/javascript">
//----------------------------------------------------------------------------------------------
function main(object_iteration) {
    function test(callback, use_objects, obj_siz, loop_siz, args ) {
        var o = use_objects ? make_object(obj_siz) : make_array(obj_siz),
           cb = function() { /* null-fun */};
        try {
            var t1 = new Date(), counter = loop_siz;
            while (counter--) { callback(o, cb, [args]); }
            return (new Date() - t1) - 0;
        } catch (x) {
        konsole.err("test():" + x );
            return -1; //  fun() has failed 
        }
    }
    //
    var ARGUMENTS = "ARGUMENTS",
        LOOP_LENGTH = "LOOP_LENGTH",
        OBJECT_SIZE = "OBJECT_SIZE", 
        NUMBER_OF_RUNS = "NUMBER_OF_RUNS",
        vals = dbj.harvester("frm",
        {   ARGUMENTS: null,
            TYPE: "object",
            OBJECT_SIZE: 1e1,
            LOOP_LENGTH: 1e1, 
            NUMBER_OF_RUNS: 1e1 });

    konsole.log("---------------------------------------------------------------------");
    konsole.log("Starting ", vals[NUMBER_OF_RUNS], " runs. With input type:", object_iteration ? " as object" : " as array",
    ", object size:", vals[OBJECT_SIZE], " , loop length: ", vals[LOOP_LENGTH]);
     
    function test_this ( label, test_fun )  {
        dbj.later(function() {
            var j = vals[NUMBER_OF_RUNS];
            while (j--) {
                dbj.summa.add(label,
            test(test_fun, object_iteration, vals[OBJECT_SIZE] - 0, vals[LOOP_LENGTH] - 0, vals[ARGUMENTS])
            );
            }
            konsole.log(label, ", total:", dbj.summa.sum(label), " ms,\t\taverage:", dbj.round( dbj.summa.avg(label), 2) );
        });
        return test_this;
    }

    test_this
    ("jQuery", jQuery.each)
    ("dbj.forEach", dbj.forEach)
    ("dbj_es5", each_es5)
    ("dbj_FT_each", optimized_each);
//    ("dbj_optimized_but_old_way", each7)
}
    //----------------------------------------------------------------------------------------------
</script>
</html>